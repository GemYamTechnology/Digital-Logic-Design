// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/24/2019 21:05:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Full_adder_S
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Full_adder_S_vlg_sample_tst(
	A,
	B,
	Ci,
	sampler_tx
);
input  A;
input  B;
input  Ci;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Ci)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Full_adder_S_vlg_check_tst (
	Co,
	So,
	sampler_rx
);
input  Co;
input  So;
input sampler_rx;

reg  Co_expected;
reg  So_expected;

reg  Co_prev;
reg  So_prev;

reg  Co_expected_prev;
reg  So_expected_prev;

reg  last_Co_exp;
reg  last_So_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Co_prev = Co;
	So_prev = So;
end

// update expected /o prevs

always @(trigger)
begin
	Co_expected_prev = Co_expected;
	So_expected_prev = So_expected;
end



// expected Co
initial
begin
	Co_expected = 1'bX;
	Co_expected = #999000 1'b0;
end 

// expected So
initial
begin
	So_expected = 1'bX;
	So_expected = #999000 1'b0;
end 
// generate trigger
always @(Co_expected or Co or So_expected or So)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Co = %b | expected So = %b | ",Co_expected_prev,So_expected_prev);
	$display("| real Co = %b | real So = %b | ",Co_prev,So_prev);
`endif
	if (
		( Co_expected_prev !== 1'bx ) && ( Co_prev !== Co_expected_prev )
		&& ((Co_expected_prev !== last_Co_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Co :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Co_expected_prev);
		$display ("     Real value = %b", Co_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Co_exp = Co_expected_prev;
	end
	if (
		( So_expected_prev !== 1'bx ) && ( So_prev !== So_expected_prev )
		&& ((So_expected_prev !== last_So_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port So :: @time = %t",  $realtime);
		$display ("     Expected value = %b", So_expected_prev);
		$display ("     Real value = %b", So_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_So_exp = So_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#8000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Full_adder_S_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg Ci;
// wires                                               
wire Co;
wire So;

wire sampler;                             

// assign statements (if any)                          
Full_adder_S i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Ci(Ci),
	.Co(Co),
	.So(So)
);

// A
always
begin
	A = 1'b0;
	A = #1000000 1'b1;
	#1000000;
end 

// B
always
begin
	B = 1'b0;
	B = #2000000 1'b1;
	#2000000;
end 

// Ci
always
begin
	Ci = 1'b0;
	Ci = #4000000 1'b1;
	#4000000;
end 

Full_adder_S_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Ci(Ci),
	.sampler_tx(sampler)
);

Full_adder_S_vlg_check_tst tb_out(
	.Co(Co),
	.So(So),
	.sampler_rx(sampler)
);
endmodule

